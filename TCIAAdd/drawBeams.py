import os
import numpy as np
import nrrd
from collections import OrderedDict
import matplotlib.colors as mcolors

rootFolder = "/data/qifan/projects/FastDoseWorkplace/TCIAAdd"
patients = ["002", "003", "009", "013", "070", "125", "132", "190"]
StructureList = []
exclude = ["PTVMerge", "rind", "PTVSeg0", "PTVSeg1", "PTVSeg2", "PTVSeg3",
           "avoid", "GTV", "ptv54combo", "transvol70", "TransPTV70", "TransPTV56"]
Converge = {"BrainStem": ["BRAIN_STEM", "Brainstem", "BRAIN_STEM_PRV"],
            "OralCavity": ["oralcavity", "oralCavity", "ORAL_CAVITY", "OralCavity"],
            "OPTIC_NERVE": ["OPTIC_NERVE", "OPTC_NERVE"]}
ConvergeReverse = {}
for name, collection in Converge.items():
    for child in collection:
        ConvergeReverse[child] = name
barLength = 100  # the length of the bar representing beams

colors = list(mcolors.TABLEAU_COLORS.values()) + list(mcolors.XKCD_COLORS.values())
colors_skip = [11, 13, 14, 16, 18]
idx = 18
for i in colors_skip:
    colors[i] = colors[idx]
    idx += 1
colorMap = {}
isoRes = 2.5

def StructsInit():
    """
    This function is to generate a coherent structure list for all patients
    """
    global StructureList, colorMap
    for patient in patients:
        patientFolder = os.path.join(rootFolder, patient)
        InputMaskFolder = os.path.join(patientFolder, "PlanMask")
        structuresLocal = os.listdir(InputMaskFolder)
        structuresLocal = [a.split(".")[0].replace(" ", "") for a in structuresLocal]
        for a in structuresLocal:
            if a not in StructureList:
                StructureList.append(a)
    StructureList_copy = []
    for name in StructureList:
        if name in ConvergeReverse:
            name = ConvergeReverse[name]
        if name not in StructureList_copy and name not in exclude and "+" not in name:
            StructureList_copy.append(name)
    StructureList = StructureList_copy.copy()

    # bring PTV70 and PTV56 forward
    StructureList.remove("PTV70")
    StructureList.remove("PTV56")
    StructureList.insert(0, "PTV56")
    StructureList.insert(0, "PTV70")
    # bring SKIN to the last
    StructureList.remove("SKIN")
    StructureList.append("SKIN")
    for i in range(4):
        StructureList.append("PTVSeg{}".format(i))
    for i in range(len(StructureList)):
        colorMap[StructureList[i]] = colors[i]


def beamAngleInit(patient):
    """
    This function is to initialize the beamlist
    """
    beamAngleList = []
    for i in range(4):
        beamListFile = os.path.join(rootFolder, patient, "beamListSeg{}.txt".format(i))
        with open(beamListFile, "r") as f:
            beams = f.readlines()
        for beam in beams:
            # remove the tailing spaces and returns
            while beam[-1] in [" ", "\n"]:
                beam = beam[:-1]
            beam = beam.replace(" ", ", ")
            beam = eval(beam)
            # convert angle to rad
            beam = np.array(beam) * np.pi / 180
            entry = ("PTVSeg{}".format(i), beam)
            beamAngleList.append(entry)
    
    if False:
        for entry in beamAngleList:
            print(entry)
    return beamAngleList


def BeamMaskGen():
    """
    This function adds beams into the current masks
    """
    for patient in patients:
        patientFolder = os.path.join(rootFolder, patient)
        templateFile = os.path.join(patientFolder, "RTSTRUCT.nrrd")
        segArray, segHeader = nrrd.read(templateFile)

        # get a clean header
        idx = 0
        while True:
            beginning = "Segment{}_".format(idx)
            idx += 1
            key = beginning + "Color"
            if key not in segHeader:
                break
            del segHeader[key]
            del segHeader[beginning + "ColorAutoGenerated"]
            del segHeader[beginning + "Extent"]
            del segHeader[beginning + "ID"]
            del segHeader[beginning + "LabelValue"]
            del segHeader[beginning + "Layer"]
            del segHeader[beginning + "Name"]
            del segHeader[beginning + "NameAutoGenerated"]
            del segHeader[beginning + "Tags"]

        dimensionNew = os.path.join(patientFolder, "metadata.txt")
        with open(dimensionNew, "r") as f:
            dimensionNew = f.readline()
        dimensionNew = dimensionNew.replace(" ", ", ")
        dimensionNew = eval(dimensionNew)
        dimensionNewFlip = np.flip(dimensionNew)

        # readMasks
        maskFolder = os.path.join(patientFolder, "PlanMask")
        maskDict = readMasks(maskFolder, dimensionNew, segArray.dtype)

        for i in range(4):
            name = "PTVSeg{}".format(i)
            maskFile = os.path.join(patientFolder, "FastDose", "plan1", "beamMasks", name+".bin")
            maskArray = np.fromfile(maskFile, dtype=np.uint8)
            maskArray = np.reshape(maskArray, dimensionNew)
            maskDict[name] = maskArray

        segHeader["sizes"][:] = [len(maskDict), *dimensionNewFlip]
        segHeader["space directions"][1, 0] = isoRes
        segHeader["space directions"][2, 1] = isoRes
        segHeader["space directions"][3, 2] = isoRes
        segHeader = list(segHeader.items())
        headerBegin = segHeader[:8]
        headerEnd = segHeader[8:]
        if False:
            for key, value in segHeader:
                print(key, value, "\n")
            break
        
        # populate new entries
        globalExtent = "0 {} 0 {} 0 {}".format(*dimensionNewFlip)
        middle = []
        segArrayNewList = []
        for i, name in enumerate(maskDict.keys()):
            color = hex_to_rgb(colorMap[name])
            beginning = "Segment{}_".format(i)
            localList = []
            localList.append((beginning + "Color", color))
            localList.append((beginning + "ColorAutoGenerated", "1"))
            localList.append((beginning + "Extent", globalExtent))
            localList.append((beginning + "ID", name))
            localList.append((beginning + "LabelValue", "1"))
            localList.append((beginning + "Layer", str(i)))
            localList.append((beginning + "Name", name))
            localList.append((beginning + "NameAutoGenerated", 1))
            localList.append((beginning + "Tags", f"DicomRtImport.RoiNumber:{i+1}|TerminologyEntry:Segmentation " \
                "category and type - 3D Slicer General Anatomy list~SCT^85756007^Tissue~SCT^85756007^Tissue~^^~" \
                "Anatomic codes - DICOM master list~^^~^^|"))
            middle.append((beginning, localList))

            # update mask
            structMask = maskDict[name]
            structMask = np.transpose(structMask, axes=(2, 1, 0))
            structMask = structMask.astype(segArray.dtype)
            structMask = np.expand_dims(structMask, axis=0)
            segArrayNewList.append(structMask)

        middle.sort(key=lambda a: a[0])
        middle_result = []
        for name, localList in middle:
            middle_result.extend(localList)
        
        segHeaderNew = headerBegin + middle_result + headerEnd
        segHeaderNew = OrderedDict(segHeaderNew)
        segArrayNew = np.concatenate(segArrayNewList, axis=0)
        segNewFile = os.path.join(patientFolder, "FastDose", "plan1", "segNew.nrrd")
        nrrd.write(segNewFile, segArrayNew, segHeaderNew)
        print(segNewFile)


def hex_to_rgb(hex_color):
    """Converts a color from hexadecimal format to RGB."""
    hex_color = hex_color.lstrip('#')
    result = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
    result = np.array(result) / 255
    result = "{} {} {}".format(*result)
    return result


def readMasks(maskFolder, dimension, dtype):
    masks = {}
    structs = os.listdir(maskFolder)
    structs = [b for a in structs if ".bin" in a and (b:=a.split(".")[0]) not in exclude]
    for name in structs:
        nameNew = ConvergeReverse[name] if name in ConvergeReverse else name
        maskFile = os.path.join(maskFolder, name + ".bin")
        maskArray = np.fromfile(maskFile, dtype=np.uint8)
        maskArray = np.reshape(maskArray, dimension)
        maskArray = maskArray.astype(dtype)
        masks[nameNew] = maskArray
    return masks


def beamMaskGen(patient):
    # get the beam angles
    patientFolder = os.path.join(rootFolder, patient)
    beamList = os.path.join(patientFolder, "FastDose", "plan1", "metadata.txt")
    with open(beamList, "r") as f:
        beamList = f.readlines()
    beamList = beamList[3]
    while beamList[-1] in [" ", "\n"]:
        beamList = beamList[:-1]
    beamList = beamList.replace("  ", ", ")
    beamList = eval(beamList)
    beamAngleList = beamAngleInit(patient)
    beamList = [beamAngleList[i] for i in beamList]

    dimension = os.path.join(patientFolder, "metadata.txt")
    with open(dimension, "r") as f:
        dimension = f.readline()
    dimension = dimension.replace(" ", ", ")
    dimension = eval(dimension)
    print(dimension)
    
    # get the isocenter location for each PTV segments
    maskCentroidDict = {}
    for i in range(4):
        maskFile = os.path.join(patientFolder, "PlanMask", "PTVSeg{}.bin".format(i))
        mask = np.fromfile(maskFile, dtype=np.uint8)
        mask = np.reshape(mask, dimension)
        maskCentroid = calcCentroid(mask)
        name = "PTVSeg{}".format(i)
        maskCentroidDict[name] = maskCentroid
    
    resultDict = {}
    for i in range(4):
        name = "PTVSeg{}".format(i)
        mask = np.zeros(dimension, dtype=np.uint8)
        resultDict[name] = mask
    
    coordsShape = dimension + (3, )
    coords = np.zeros(coordsShape, dtype=float)
    axis_x = np.arange(dimension[0])
    axis_x = np.expand_dims(axis_x, axis=(1, 2))
    axis_y = np.arange(dimension[1])
    axis_y = np.expand_dims(axis_y, axis=(0, 2))
    axis_z = np.arange(dimension[2])
    axis_z = np.expand_dims(axis_z, axis=(0, 1))
    coords[:, :, :, 0] = axis_x
    coords[:, :, :, 1] = axis_y
    coords[:, :, :, 2] = axis_z
    
    radius = 2
    # add beams to mask
    for name, angle in beamList:
        centroid = maskCentroidDict[name]
        axisBEV = np.array((0, 1, 0))
        axisPVCS = inverseRotateBeamAtOriginRHS(axisBEV, angle[0], angle[1], angle[2])
        
        coordsDiff = coords - centroid
        axisPVCS = np.expand_dims(axisPVCS, axis=(0, 1, 2))
        alongAxisProjection = np.sum(coordsDiff * axisPVCS, axis=3, keepdims=True)
        perpendicular = coordsDiff - alongAxisProjection * axisPVCS

        distance = np.linalg.norm(perpendicular, axis=3)
        localMask = distance < radius

        alongAxisProjection = np.squeeze(alongAxisProjection)
        localMask = np.logical_and(localMask, alongAxisProjection < 0)
        localMask = np.logical_and(localMask, alongAxisProjection > -barLength)
        resultDict[name] = np.logical_or(resultDict[name], localMask)
        print(patient, name, angle)
    
    for key in resultDict:
        resultDict[key] = resultDict[key].astype(np.uint8)

    return resultDict


def calcCentroid(mask):
    mask = mask > 0
    nVoxels = np.sum(mask)
    shape = mask.shape

    xWeight = np.arange(shape[0])
    xWeight = np.expand_dims(xWeight, axis=(1, 2))
    xCoord = np.sum(mask * xWeight) / nVoxels

    yWeight = np.arange(shape[1])
    yWeight = np.expand_dims(yWeight, axis=(0, 2))
    yCoord = np.sum(mask * yWeight) / nVoxels

    zWeight = np.arange(shape[2])
    zWeight = np.expand_dims(zWeight, axis=(0, 1))
    zCoord = np.sum(mask * zWeight) / nVoxels

    result = np.array((xCoord, yCoord, zCoord))
    return result


def rotateAroundAxisAtOriginRHS(p, axis, angle):
    # p: the vector to rotate
    # axis: the rotation axis
    # angle: in rad. The angle to rotate
    sint = np.sin(angle)
    cost = np.cos(angle)
    one_minus_cost = 1 - cost
    p_dot_axis = np.dot(p, axis)
    first_term_coeff = one_minus_cost * p_dot_axis
    result = first_term_coeff * axis + \
        cost * p + \
        sint * np.cross(axis, p)
    return result

def inverseRotateBeamAtOriginRHS(vec, theta, phi, coll):
    # convert BEV coords to PVCS coords
    tmp = rotateAroundAxisAtOriginRHS(vec, np.array((0, 1, 0)), -(phi + coll))
    sptr = -np.sin(phi)
    cptr = np.cos(phi)
    rotation_axis = np.array((sptr, 0, cptr))
    result = rotateAroundAxisAtOriginRHS(tmp, rotation_axis, theta)
    return result


def beamMaskWrite():
    """
    This function writes the masks to folder
    """
    for patient in patients:
        maskDict = beamMaskGen(patient)
        resultFolder = os.path.join(rootFolder, patient, "FastDose", "plan1", "beamMasks")
        if not os.path.isdir(resultFolder):
            os.mkdir(resultFolder)
        for name, mask in maskDict.items():
            file = os.path.join(resultFolder, name + ".bin")
            mask.tofile(file)
            print(file)


if __name__ == "__main__":
    StructsInit()
    beamMaskWrite()
    BeamMaskGen()