import os
import numpy as np
import nrrd
from collections import OrderedDict
import matplotlib.colors as mcolors
from scipy.signal import convolve

patients = ["002", "003", "009", "013", "070", "125", "132", "190"]
RootFolder = "/data/qifan/projects/FastDoseWorkplace/TCIAAdd"
StructureList = []
exclude = ["PTVMerge", "rind", "PTVSeg0", "PTVSeg1", "PTVSeg2", "PTVSeg3",
           "PTVMerge", "avoid", "GTV", "ptv54combo", "transvol70"]
Converge = {"BrainStem": ["BRAIN_STEM", "Brainstem", "BRAIN_STEM_PRV"],
            "OralCavity": ["oralcavity", "oralCavity", "ORAL_CAVITY", "OralCavity"],
            "OPTIC_NERVE": ["OPTIC_NERVE", "OPTC_NERVE"]}
ConvergeReverse = {}
for name, collection in Converge.items():
    for child in collection:
        ConvergeReverse[child] = name

colors = list(mcolors.TABLEAU_COLORS.values()) + list(mcolors.XKCD_COLORS.values())
colors_skip = [11, 13, 14, 16, 18]
idx = 18
for i in colors_skip:
    colors[i] = colors[idx]
    idx += 1
colorMap = {}

def StructsInit():
    """
    This function is to generate a coherent structure list for all patients
    """
    global StructureList, colorMap
    for patient in patients:
        patientFolder = os.path.join(RootFolder, patient)
        InputMaskFolder = os.path.join(patientFolder, "PlanMask")
        structuresLocal = os.listdir(InputMaskFolder)
        structuresLocal = [a.split(".")[0].replace(" ", "") for a in structuresLocal]
        for a in structuresLocal:
            if a not in StructureList:
                StructureList.append(a)
    StructureList_copy = []
    for name in StructureList:
        if name in ConvergeReverse:
            name = ConvergeReverse[name]
        if name not in StructureList_copy and name not in exclude and "+" not in name:
            StructureList_copy.append(name)

    StructureList_copy.append("SKIN")  # append SKIN to the back
    StructureList = StructureList_copy.copy()
    for i in range(len(StructureList)):
        colorMap[StructureList[i]] = colors[i]

def nrrdExamine():
    attributes = ["Color", "ColorAutoGenerated", "Extent", "ID", "LabelValue",
        "Layer", "Name", "NameAutoGenerated", "Tags"]
    for patient in patients:
        patientFolder = os.path.join(RootFolder, patient)
        RTSTRUCT_file = os.path.join(patientFolder, "RTSTRUCT.nrrd")
        seg, header = nrrd.read(RTSTRUCT_file)
        filtered = {a: b for a, b in header.items() if "Segment0" in a}
        
        # the main problem is Segment*_Extent
        local_shape = seg.shape[1:]
        print(patient, local_shape)
        patientExtent = "0 {} 0 {} 0 {}".format(*local_shape)

        idx = 0
        while True:
            key = "Segment{}_Extent".format(idx)
            idx += 1
            if key not in header:
                break
            header[key] = patientExtent
        
        outputFile = os.path.join(patientFolder, "RT_exp.nrrd")
        nrrd.write(outputFile, seg, header)
        break


def hex_to_rgb(hex_color):
    """Converts a color from hexadecimal format to RGB."""
    hex_color = hex_color.lstrip('#')
    result = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
    result = np.array(result) / 255
    result = "{} {} {}".format(*result)
    return result


def readMasks(seg, header):
    masks = {}
    nameIdxMapping = {}
    idx = 0
    while True:
        key = "Segment{}_Layer".format(idx)
        if key not in header:
            break
        layer = int(header[key])
        key = "Segment{}_LabelValue".format(idx)
        label = int(header[key])
        key = "Segment{}_Name".format(idx)
        name = header[key]

        name = name.replace(" ", "")
        if name in exclude or "Trans" in name or "+" in name:
            idx += 1
            continue
        if name in ConvergeReverse:
            name = ConvergeReverse[name]

        mask = seg[layer, :, :, :] == label
        masks[name] = mask
        nameIdxMapping[name] = idx

        idx += 1
    return masks, nameIdxMapping


def maskTrim(masks):
    "This function merges PTV masks of the same dose, and crops masks so that PTV masks do not " \
    "overlap with each other, and OAR masks do not overlap with PTV masks"
    PTVList = [a for a in masks if "ptv" in a.lower() or "ctv" in a.lower()]
    OARMap = {a: b for a, b in masks.items() if "ptv" not in a.lower() and "ctv" not in a.lower()}
    PTVDoseMap = {}
    for a in PTVList:
        dose = int("".join((i for i in a if i.isdigit())))
        if dose not in PTVDoseMap:
            PTVDoseMap[dose] = [a]
        else:
            PTVDoseMap[dose].append(a)
    PTVMap = {}
    for dose, structs in PTVDoseMap.items():
        PTVMask = None
        for struct in structs:
            if PTVMask is None:
                PTVMask = masks[struct]
            else:
                PTVMask = np.logical_or(PTVMask, masks[struct])
        PTVMap[dose] = PTVMask
    PTVMap = [(a, b) for a, b in PTVMap.items()]
    PTVMap.sort(key=lambda a: a[0], reverse=True)
    PTVMap = [["PTV{}".format(dose), mask] for dose, mask in PTVMap]
    
    canvas = None
    for i in range(len(PTVMap)):
        mask = PTVMap[i][1]
        if canvas is None:
            canvas = mask
        else:
            mask = np.logical_and(mask, np.logical_not(canvas))
            canvas = np.logical_or(mask, canvas)
            PTVMap[i][1] = mask
    for key in OARMap:
        if key == "SKIN":
            continue
        OARMap[key] = np.logical_and(OARMap[key], np.logical_not(canvas))
    masks.clear()
    for name, mask in PTVMap:
        masks[name] = mask
    for name, mask in OARMap.items():
        masks[name] = mask


def nrrdModify():
    """
    This function modifies the original nrrd file
    """
    for patient in patients:
        patientFolder = os.path.join(RootFolder, patient)
        templateFile = os.path.join(patientFolder, "RTSTRUCT.nrrd")
        seg, header = nrrd.read(templateFile)

        masks, nameIdxMapping = readMasks(seg, header)
        maskTrim(masks)

        # repair SKIN
        skinMask = masks["SKIN"]
        convolveKernel = np.array((1, 1, 1))
        convolveKernel = np.expand_dims(convolveKernel, axis=(0, 1))
        skinMask = convolve(skinMask, convolveKernel, mode="same")
        skinMask = skinMask > 0
        masks["SKIN"] = skinMask

        shape = header["sizes"][1:]
        commonExtent = "0 {} 0 {} 0 {}".format(*shape)

        for name, mask in masks.items():
            if name != "SKIN" and True:
                continue
            idx = nameIdxMapping[name]
            beginning = "Segment{}_".format(idx)

            color = hex_to_rgb(colorMap[name])
            layer = int(header[beginning + "Layer"])
            labelValue = int(header[beginning + "LabelValue"])
            layerArray = seg[layer, :, :, :]
            layerArray[layerArray==labelValue] = 0
            layerArray[mask>0] = labelValue

            header[beginning + "Color"] = color
            header[beginning + "Extent"] = commonExtent
            header[beginning + "ID"] = name
            header[beginning + "Name"] = name
        
            print("patient {} segment {}".format(patient, name))
        
        file = os.path.join(patientFolder, "RT_exp.nrrd")
        nrrd.write(file, seg, header)
        break


if __name__ == "__main__":
    StructsInit()
    nrrdModify()